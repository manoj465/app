



/*
:'######::'########:'########::'####:'##::: ##::'######::::::::::'##::::'##::::'##::'######::'##::::'##:::::'#######::'########::::::::'##:'########::'######::'########:
'##... ##:... ##..:: ##.... ##:. ##:: ###:: ##:'##... ##:::::::::. ##::: ##:::: ##:'##... ##: ##:::: ##::::'##.... ##: ##.... ##::::::: ##: ##.....::'##... ##:... ##..::
 ##:::..::::: ##:::: ##:::: ##:: ##:: ####: ##: ##:::..:::'#####::. ##:: ##:::: ##: ##:::..:: ##:::: ##:::: ##:::: ##: ##:::: ##::::::: ##: ##::::::: ##:::..::::: ##::::
. ######::::: ##:::: ########::: ##:: ## ## ##: ##::'####:.....::::. ##: #########:. ######:: ##:::: ##:::: ##:::: ##: ########:::::::: ##: ######::: ##:::::::::: ##::::
:..... ##:::: ##:::: ##.. ##:::: ##:: ##. ####: ##::: ##::'#####::: ##:: ##.... ##::..... ##:. ##:: ##::::: ##:::: ##: ##.... ##:'##::: ##: ##...:::: ##:::::::::: ##::::
'##::: ##:::: ##:::: ##::. ##::: ##:: ##:. ###: ##::: ##::.....::: ##::: ##:::: ##:'##::: ##::. ## ##:::::: ##:::: ##: ##:::: ##: ##::: ##: ##::::::: ##::: ##:::: ##::::
. ######::::: ##:::: ##:::. ##:'####: ##::. ##:. ######:::::::::: ##:::: ##:::: ##:. ######::::. ###:::::::. #######:: ########::. ######:: ########:. ######::::: ##::::
:......::::::..:::::..:::::..::....::..::::..:::......:::::::::::..:::::..:::::..:::......::::::...:::::::::.......:::........::::......:::........:::......::::::..:::::
*/

import { logger } from "../../@logger";


interface getHsvFromString_props {
    hsvString: string
    log?: logger
}
type getHsvFromString_t = (props: getHsvFromString_props) => { h: number, s: number, v: number } | undefined
export const getHsvFromString: getHsvFromString_t = ({ hsvString, log }) => {
    const hsvStringSplitArray = hsvString.split("-")
    const hsv = { h: 0, s: 0, v: 0 }
    if (hsvStringSplitArray.length == 3) {
        hsvStringSplitArray.forEach((element, index) => {
            log?.print("int at index " + index + " is " + parseInt(element))
        });
        hsv.h = parseInt(hsvStringSplitArray[0])
        hsv.s = parseInt(hsvStringSplitArray[1])
        hsv.v = parseInt(hsvStringSplitArray[2])
        return hsv
    } else {
        console.log("invalid hsv string")
    }
    return undefined
}






/*
'########:'########::'######::'########:::::'######:::'#######::'########::'########:
... ##..:: ##.....::'##... ##:... ##..:::::'##... ##:'##.... ##: ##.... ##: ##.....::
::: ##:::: ##::::::: ##:::..::::: ##::::::: ##:::..:: ##:::: ##: ##:::: ##: ##:::::::
::: ##:::: ######:::. ######::::: ##::::::: ##::::::: ##:::: ##: ##:::: ##: ######:::
::: ##:::: ##...:::::..... ##:::: ##::::::: ##::::::: ##:::: ##: ##:::: ##: ##...::::
::: ##:::: ##:::::::'##::: ##:::: ##::::::: ##::: ##: ##:::: ##: ##:::: ##: ##:::::::
::: ##:::: ########:. ######::::: ##:::::::. ######::. #######:: ########:: ########:
:::..:::::........:::......::::::..:::::::::......::::.......:::........:::........::
*/

/* {
    (() => {
        console.log("test code begin")
        let hsv = getHsvFromString({ hsvString: "0-100-110" })
        if (hsv) {
            console.log("h is " + hsv?.h + ", s is " + hsv?.s + ", v is " + hsv?.v)
        } else {
            console.log("could not convert string to hsv")
        }
    })()
} */

/* {
    (() => {
        //const timersString = "[{\"H\":\"11\",\"M\":\"30\",\"DT\":0,\"DAYS\":1234,\"ET\":0,\"STATUS\":1234}, {\"H\":\"12\",\"M\":\"30\",\"DT\":0,\"DAYS\":1234,\"ET\":0,\"STATUS\":1234}]"
        //let timers = convertTimersStringToObj({ timersString })
        let daysNumber = 0
        for (let index = 0; index < 7; index++) {
            daysNumber = setBit(index, daysNumber, true)
            console.log("number now is " + daysNumber)
        }
    })()
} */