import { FontAwesome5, MaterialIcons } from "@expo/vector-icons";
import { RouteProp } from "@react-navigation/native";
import { StackNavigationProp } from "@react-navigation/stack";
import { LinearGradient } from "expo-linear-gradient";
import React, { useEffect, useRef } from "react";
import { StyleSheet, Text, View } from "react-native";
import { FlatList, RectButton, State } from "react-native-gesture-handler";
import Animated, { call, cond, eq, Extrapolate, useCode } from "react-native-reanimated";
import { onScrollEvent, useValue } from "react-native-redash";
import { SafeAreaView } from "react-native-safe-area-context";
import { useDispatch, useSelector } from "react-redux";
import { reduxStore } from "../../../redux";
//native imports
import { _appState } from "../../../redux/reducers";
import { MainRouterStackParamList } from "../../../routers/MainRouter";
import { containerListOperation } from "../../../util/dataManipulator";
import { logger } from "../../../util/logger";
import { NewRectButton } from "../../common/buttons/RectButtonCustom";
import { DeviceObjectContainer } from "./containerItem";
import { Dash_header, HEADER_MAX_HEIGHT } from './header';

const navigationIconSize = 25;

type DashboardNavigationProp = StackNavigationProp<
  MainRouterStackParamList,
  "dashboard"
>;

type dashboardRouteProp = RouteProp<MainRouterStackParamList, "dashboard">;

interface Props {
  navigation: DashboardNavigationProp;
  route: dashboardRouteProp;
}

export const Dashboard = ({ navigation, route: { params } }: Props) => {
  let log = new logger("DASHBOARD")
  const dispatch = useDispatch();
  const containerList = useSelector(({ deviceReducer: { containers } }: _appState) => containers);
  const y = useValue(0)
  const scrollViewRef = useRef(null)
  //const state = useValue(State.UNDETERMINED)
  //const onScroll = onScrollEvent({ y })
  //const scroll = useRef(null);


  return (
    <SafeAreaView style={styles.container}>
      <Dash_header
        log={log}
        ScrollY={y}
        navigation={navigation}
      />

      {/* /Sec1: deviceListContainer */}
      <Animated.ScrollView
        ref={scrollViewRef}
        showsVerticalScrollIndicator={false}
        style={styles.deviceListContainer}
      /* onScroll={Animated.event([
        {
          nativeEvent: {
            contentOffset: {
              y: y
            }
          }
        }
      ])} */
      /* onScrollEndDrag={() => {
        log.print("[ANIMATED SCROLLVIEW] scroll end" + y)
        if (scrollViewRef?.current) {
          const node = scrollViewRef?.current?.getNode()
          if (node && false) {
            try {
              node.scrollTo({ y: 0, animated: true });
              console.log("scroll to top ")
            } catch (error) { }
          }
        }
      }} */
      >
        <View>
          <View style={{ height: HEADER_MAX_HEIGHT + 60 }}></View>
          {containerList.map((item, index) => {
            return (
              <View>
                <DeviceObjectContainer
                  containerObject={item}
                  navigation={navigation}
                />
                {/* /// dashboard menu card */}
                {/* index == containerList.length - 1 */false && (
                  <View style={{ minHeight: 150, width: "100%", borderWidth: 1, borderColor: "#55f", borderRadius: 25, justifyContent: "space-around" }}>
                    <NewRectButton
                      buttonStyle={{ marginHorizontal: "15%", borderColor: "#55f", borderWidth: 0.5, marginVertical: 10 }}
                      text="ADD NEW DEVICE"
                      onPress={() => {
                        navigation.navigate("pairing");
                      }}
                    />
                    <NewRectButton
                      buttonStyle={{ marginHorizontal: "15%", borderColor: "#55f", borderWidth: 0.5, marginVertical: 10 }}
                      text="CREATE GROUP"
                      onPress={() => {
                      }}
                    />
                    {/* Bottom button bar */}
                    {true && <View style={{ flexDirection: "row", width: "100%", justifyContent: "space-around", paddingVertical: 10 }}>
                      {/* Print current Container List */}
                      {/* ///print containerList */}
                      <NewRectButton
                        buttonStyle={{ height: 40, width: 40, borderRadius: 10 }}
                        text="."
                        onPress={() => {
                          console.log("[CURRENT CONTAINER LIST] >> " + JSON.stringify(containerList))
                        }} />
                      {/* ///add container */}
                      <NewRectButton
                        buttonStyle={{ height: 40, width: 40, borderRadius: 10 }}
                        text="."
                        onPress={async () => {
                          log.print("ADD DUMMY DEVICE")
                          const newContainerList = await containerListOperation({
                            props: {
                              cmd: "ADD_NEW_DEVICE",
                              conName: "TESTCON",
                              newDevice: {
                                deviceName: "newLight12",
                                IP: "192.168.4.1",
                                Mac: "TESTMAC1"
                              }
                            },
                            log
                          })
                          log.print("DUMMY DEVICE ADDED :: " + JSON.stringify(newContainerList))
                        }} />
                      {/* ///remove container */}
                      <NewRectButton
                        buttonStyle={{ height: 40, width: 40, borderRadius: 10 }}
                        text="."
                        onPress={async () => {
                          log.print("REMOVE CONTAINER")
                          const newContainerList = await containerListOperation({
                            props: {
                              cmd: "REMOVE_CONTAINER",
                              conUUID: ""
                            },
                            log
                          })
                          log.print("CONTAINER REMOVED : " + JSON.stringify(newContainerList))
                        }} />
                      {/* ///remove device */}
                      <NewRectButton
                        buttonStyle={{ height: 40, width: 40, borderRadius: 10 }}
                        text="."
                        onPress={async () => {
                          log.print("REMOVE DEVICE")
                          const newContainerList = await containerListOperation({
                            props: {
                              cmd: "REMOVE_DEVICE",
                              Mac: "BC:DD:C2:9D:30:15"
                              //Mac: "TESTMAC"
                            },
                            log
                          })
                          log.print("DEVICE REMOVED : " + JSON.stringify(newContainerList))
                        }} />
                    </View>}
                  </View>
                )
                }
              </View>

            )
          })}

        </View>
      </Animated.ScrollView>
      {/*  <FlatList
        //ref={scroll}
        //onScroll={onScroll}
        showsVerticalScrollIndicator={false}
        data={containerList}
        keyExtractor={(item, index) =>
          "0" + index
        }
        extraData={containerList}
        renderItem={({ item, index }) => {
          return (
            <View />
          );
        }}
      /> */}
      {/* Sec2:  */}
      {false && <View style={styles.navigatorMenu}>
        <RectButton
          onPress={() => {
            //navigation.navigate("pairing");
            /* dispatch(
              newDeviceSagaAction({
                newDevice: Object.assign({}, dummyDevice, {
                  deviceName: "Kitchen TubeLight",
                  SSID: "Homelink1",
                  wifiPass: "Ioplmkjnb@1",
                  Mac: "ED:98:H3:49:f5",
                  groupName: "group",
                }),
                groupType: GROUP_TYPES.SINGLETON,
              })
            ); */
          }}
          style={{
            borderRightWidth: 0.5,
            justifyContent: "space-between",
            alignItems: "center",
            paddingRight: 10,
          }}
        >
          <View
            style={{
              //backgroundColor: "green",
              flex: 1,
              justifyContent: "center",
              height: 35,
            }}
          >
            <FontAwesome5
              name="layer-group"
              size={navigationIconSize}
              color="white"
            />
          </View>
          <View style={{ paddingVertical: 2 }}>
            <Text style={{ color: "white", fontSize: 12 }}>New Group</Text>
          </View>
        </RectButton>
        <RectButton
          onPress={() => {
            navigation.navigate("pairing");
          }}
          style={{
            justifyContent: "space-between",
            alignItems: "center",
            paddingLeft: 10,
          }}
        >
          <View
            style={{
              //backgroundColor: "green",
              flex: 1,
              justifyContent: "center",
              height: 35,
            }}
          >
            <MaterialIcons
              name="add-circle-outline"
              size={navigationIconSize}
              color="white"
            />
          </View>
          <View style={{ paddingVertical: 2 }}>
            <Text style={{ color: "white", fontSize: 12 }}>Add Device</Text>
          </View>
        </RectButton>
      </View>}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    display: "flex",
    flexDirection: "column",
    //backgroundColor: "#002",
    flex: 1,
  },
  ScreenName: {
    fontSize: 20,
    marginHorizontal: 100,
    transform: [{ translateX: 2 }],
  },
  deviceListContainer: {
    flex: 1,
    display: "flex",
    flexDirection: "column",
    //backgroundColor: "#0aa",
    paddingHorizontal: "2%"
  },
  navigatorMenu: {
    backgroundColor: "#33f",
    paddingHorizontal: 10,
    borderRadius: 15,
    overflow: "hidden",
    alignSelf: "center",
    position: "absolute",
    bottom: 10,
    display: "flex",
    flexDirection: "row",
    /* shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 1, */
  },
});




//TODO setup dashboard with new DB-set
//TODO allOff button in dashboard
//TODO dashboard navigation block
//TODO device off on icon tap in deviceCard
//TODO deviceCard Icon selector